package bot

import (
"errors"
	"fmt"
	"reflect"
	"sort"
"strings"
	"sync"
"testing"
	"time"
)

var (
channel     string
	replies     chan string
	cmdError    chan string
user        *User
	msgs        []string
errs        []string
protoParams interface{}
)

const (
expectedMsg    = "msg"
	cmd            = "cmd"
cmdDescription = "Command description"
cmdExampleArgs = "arg1 arg2"
)

func waitMessages(t *testing.T, count int, errorCount int) {
for {
		select {
case reply := <-replies:
msgs = append(msgs, reply)
		case err := <-cmdError:
errs = append(errs, err)
		case <-time.After(1 * time.Second):
t.Error("Timeout waiting for messages")
t.Errorf("msgs received: %v", msgs)
			t.Errorf("errs received: %v", errs)
t.Fatal()
		}
if len(msgs) == count && len(errs) == errorCount {
			return
}
	}
}

func responseHandler(target string, message string, sender *User) {
channel = target
	user = sender
	replies <- message
}

func responseHandlerV2(om OutgoingMessage) {
	channel = om.Target
user = om.Sender
	protoParams = om.ProtoParams
replies <- om.Message
}

func errorHandler(msg string, err error) {
	cmdError <- fmt.Sprintf("%s: %s", msg, err)
}

func reset() {
	channel = ""
user = &User{Nick: ""}
replies = make(chan string, 10)
cmdError = make(chan string, 10)
msgs = []string{}
errs = []string{}
	protoParams = nil
commands = make(map[string]*customCommand)
	periodicCommands = make(map[string]PeriodicConfig)
passiveCommands = make(map[string]*customCommand)
filterCommands = make(map[string]*customCommand)
}

func newBot() *Bot {
	return New(&Handlers{
	Response: responseHandler,
		Errored:  errorHandler,
	},
&Config{
			Protocol: "test",
	Server:   "test",
		},
	)
}

func newBotV2() *Bot {
return New(&Handlers{
		Response:   responseHandler,
ResponseV2: responseHandlerV2,
		Errored:    errorHandler,
},
		&Config{
			Protocol: "test",
Server:   "test",
		},
	)
}

func registerValidCommand() {
	RegisterCommand(cmd, cmdDescription, cmdExampleArgs,
func(c *Cmd) (string, error) {
			return expectedMsg, nil
		})
}

func TestPeriodicCommands(t *testing.T) {
	reset()
	RegisterPeriodicCommand("morning",
PeriodicConfig{
			CronSpec: "0 08 * * mon-fri",
Channels: []string{"#channel"},
			CmdFunc:  func(channel string) (string, error) { return "ok " + channel, nil },
		})
	b := New(
		&Handlers{Response: responseHandler},
&Config{Protocol: "test", Server: "test"},
	)
	defer b.Close()

	entries := b.cron.Entries()
	if len(entries) != 1 {
		t.Fatal("Should have one cron job entry")
}
	if entries[0].Next.Hour() != 8 {
		t.Fatal("Cron job should be scheduled to 8am")
}

	entries[0].Job.Run()

	waitMessages(t, 1, 0)

	if msgs[0] != "ok #channel" {
	t.Fatal("Invalid reply")
	}
}
func TestMultiplePeriodicCommands(t *testing.T) {
	reset()
RegisterPeriodicCommand("morning",
		PeriodicConfig{
			CronSpec: "0 08 * * mon-fri",
	Channels: []string{"#channel"},
			CmdFunc:  func(channel string) (string, error) { return "ok " + channel, nil },
		})
	b := New(
		&Handlers{Response: responseHandler},
&Config{Protocol: "test", Server: "test"},
	)
	defer b.Close()

	entries := b.cron.Entries()
	if len(entries) != 1 {
		t.Fatal("Should have one cron job entry")
}
	if entries[0].Next.Hour() != 8 {
		t.Fatal("Cron job should be scheduled to 8am")
	}

	entries[0].Job.Run()

	waitMessages(t, 1, 0)

	if msgs[0] != "ok #channel" {
	t.Fatal("Invalid reply")
	}
}
func TestMultiplePeriodicCommands(t *testing.T) {
	reset()
	RegisterPeriodicCommand("morning",
	PeriodicConfig{
			CronSpec: "0 08 * * mon-fri",
Channels: []string{"#channel"},
			CmdFunc:  func(channel string) (string, error) { return "ok " + channel, nil },
		})
	b := New(
		&Handlers{Response: responseHandler},
		&Config{Protocol: "test", Server: "test"},
)
	defer b.Close()

	entries := b.cron.Entries()

	if len(entries) != 1 {
		t.Fatal("Should have one cron job entry")
	}

	entries[0].Job.Run()
	waitMessages(t, 0, 1)

	if len(msgs) != 0 {
		t.Error("Should not have a reply in the channel")
}
	if len(errs) != 1 {
		t.Error("Expected 1 error")
	}
}

func TestPeriodicCommandsV2(t *testing.T) {
	reset()
	RegisterPeriodicCommandV2("morning",
PeriodicConfig{
			CronSpec: "0 08 * * mon-fri",
Channels: []string{"#channel"},
			CmdFunc:  func(channel string) (string, error) { return "ok " + channel, nil },
		})
	b := New(
		&Handlers{Response: responseHandler},
&Config{Protocol: "test", Server: "test"},
	)
	defer b.Close()

	entries := b.cron.Entries()
if len(entries) != 1 {
		t.Fatal("Should have one cron job entry")
}
	if entries[0].Next.Hour() != 8 {
		t.Fatal("Cron job should be scheduled to 8am")
	}

	entries[0].Job.Run()

	waitMessages(t, 1, 0)

	if msgs[0] != "ok #channel" {
	t.Fatal("Invalid reply")
	}
}
func TestMultiplePeriodicCommands(t *testing.T) {
reset()
	RegisterPeriodicCommand("morning",
		PeriodicConfig{
	CronSpec: "0 08 * * mon-fri",
			Channels: []string{"#channel"},
CmdFunc:  func(channel string) (string, error) { return "ok " + channel, nil },
		})
	b := New(
		&Handlers{Response: responseHandler},
&Config{Protocol: "test", Server: "test"},
	)
	defer b.Close()

	entries := b.cron.Entries()
if len(entries) != 1 {
		t.Fatal("Should have one cron job entry")
}
	if entries[0].Next.Hour() != 8 {
		t.Fatal("Cron job should be scheduled to 8am")
}

	entries[0].Job.Run()

	waitMessages(t, 1, 0)

	if msgs[0] != "ok #channel" {
	t.Fatal("Invalid reply")
	}
}
func TestMultiplePeriodicCommands(t *testing.T) {
